// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("Cartridge")));
bytes32 constant CartridgeTableId = _tableId;

struct CartridgeData {
  address author;
  uint256 parent;
  bytes32 staticRoot;
  bytes32 dynRoot;
}

library Cartridge {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](4);
    _schema[0] = SchemaType.ADDRESS;
    _schema[1] = SchemaType.UINT256;
    _schema[2] = SchemaType.BYTES32;
    _schema[3] = SchemaType.BYTES32;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](1);
    _schema[0] = SchemaType.UINT256;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](4);
    _fieldNames[0] = "author";
    _fieldNames[1] = "parent";
    _fieldNames[2] = "staticRoot";
    _fieldNames[3] = "dynRoot";
    return ("Cartridge", _fieldNames);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Register the table's schema (using the specified store) */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Set the table's metadata */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Set the table's metadata (using the specified store) */
  function setMetadata(IStore _store) internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    _store.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Get author */
  function getAuthor(uint256 id) internal view returns (address author) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256((id)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0);
    return (address(Bytes.slice20(_blob, 0)));
  }

  /** Get author (using the specified store) */
  function getAuthor(IStore _store, uint256 id) internal view returns (address author) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256((id)));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 0);
    return (address(Bytes.slice20(_blob, 0)));
  }

  /** Set author */
  function setAuthor(uint256 id, address author) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256((id)));

    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked((author)));
  }

  /** Set author (using the specified store) */
  function setAuthor(IStore _store, uint256 id, address author) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256((id)));

    _store.setField(_tableId, _keyTuple, 0, abi.encodePacked((author)));
  }

  /** Get parent */
  function getParent(uint256 id) internal view returns (uint256 parent) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256((id)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get parent (using the specified store) */
  function getParent(IStore _store, uint256 id) internal view returns (uint256 parent) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256((id)));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 1);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Set parent */
  function setParent(uint256 id, uint256 parent) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256((id)));

    StoreSwitch.setField(_tableId, _keyTuple, 1, abi.encodePacked((parent)));
  }

  /** Set parent (using the specified store) */
  function setParent(IStore _store, uint256 id, uint256 parent) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256((id)));

    _store.setField(_tableId, _keyTuple, 1, abi.encodePacked((parent)));
  }

  /** Get staticRoot */
  function getStaticRoot(uint256 id) internal view returns (bytes32 staticRoot) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256((id)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 2);
    return (Bytes.slice32(_blob, 0));
  }

  /** Get staticRoot (using the specified store) */
  function getStaticRoot(IStore _store, uint256 id) internal view returns (bytes32 staticRoot) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256((id)));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 2);
    return (Bytes.slice32(_blob, 0));
  }

  /** Set staticRoot */
  function setStaticRoot(uint256 id, bytes32 staticRoot) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256((id)));

    StoreSwitch.setField(_tableId, _keyTuple, 2, abi.encodePacked((staticRoot)));
  }

  /** Set staticRoot (using the specified store) */
  function setStaticRoot(IStore _store, uint256 id, bytes32 staticRoot) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256((id)));

    _store.setField(_tableId, _keyTuple, 2, abi.encodePacked((staticRoot)));
  }

  /** Get dynRoot */
  function getDynRoot(uint256 id) internal view returns (bytes32 dynRoot) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256((id)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 3);
    return (Bytes.slice32(_blob, 0));
  }

  /** Get dynRoot (using the specified store) */
  function getDynRoot(IStore _store, uint256 id) internal view returns (bytes32 dynRoot) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256((id)));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 3);
    return (Bytes.slice32(_blob, 0));
  }

  /** Set dynRoot */
  function setDynRoot(uint256 id, bytes32 dynRoot) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256((id)));

    StoreSwitch.setField(_tableId, _keyTuple, 3, abi.encodePacked((dynRoot)));
  }

  /** Set dynRoot (using the specified store) */
  function setDynRoot(IStore _store, uint256 id, bytes32 dynRoot) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256((id)));

    _store.setField(_tableId, _keyTuple, 3, abi.encodePacked((dynRoot)));
  }

  /** Get the full data */
  function get(uint256 id) internal view returns (CartridgeData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256((id)));

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(IStore _store, uint256 id) internal view returns (CartridgeData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256((id)));

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(uint256 id, address author, uint256 parent, bytes32 staticRoot, bytes32 dynRoot) internal {
    bytes memory _data = encode(author, parent, staticRoot, dynRoot);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256((id)));

    StoreSwitch.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using individual values (using the specified store) */
  function set(
    IStore _store,
    uint256 id,
    address author,
    uint256 parent,
    bytes32 staticRoot,
    bytes32 dynRoot
  ) internal {
    bytes memory _data = encode(author, parent, staticRoot, dynRoot);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256((id)));

    _store.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using the data struct */
  function set(uint256 id, CartridgeData memory _table) internal {
    set(id, _table.author, _table.parent, _table.staticRoot, _table.dynRoot);
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, uint256 id, CartridgeData memory _table) internal {
    set(_store, id, _table.author, _table.parent, _table.staticRoot, _table.dynRoot);
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(bytes memory _blob) internal pure returns (CartridgeData memory _table) {
    _table.author = (address(Bytes.slice20(_blob, 0)));

    _table.parent = (uint256(Bytes.slice32(_blob, 20)));

    _table.staticRoot = (Bytes.slice32(_blob, 52));

    _table.dynRoot = (Bytes.slice32(_blob, 84));
  }

  /** Tightly pack full data using this table's schema */
  function encode(
    address author,
    uint256 parent,
    bytes32 staticRoot,
    bytes32 dynRoot
  ) internal view returns (bytes memory) {
    return abi.encodePacked(author, parent, staticRoot, dynRoot);
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple(uint256 id) internal pure returns (bytes32[] memory _keyTuple) {
    _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256((id)));
  }

  /* Delete all data for given keys */
  function deleteRecord(uint256 id) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256((id)));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, uint256 id) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256((id)));

    _store.deleteRecord(_tableId, _keyTuple);
  }
}
